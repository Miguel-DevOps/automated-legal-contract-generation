version: '3.8'

services:
  # --- REVERSE PROXY ---
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway
      - web
    networks:
      - app-network
    restart: unless-stopped

  # --- FRONTEND ---
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: web
        SERVICE_TYPE: nextjs
        SERVICE_PORT: 3000
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - SERVICE_TYPE=nextjs
    networks:
      - app-network
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- API GATEWAY ---
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
        SERVICE_TYPE: nestjs
        SERVICE_PORT: 4000
    env_file:
      - .env
    expose:
      - "4000"
    depends_on:
      - auth-service
      - contracts-service
      - templates-service
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- AUTH SERVICE ---
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: auth-service
        SERVICE_TYPE: nestjs
        SERVICE_PORT: 3001
    env_file:
      - .env
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- CONTRACTS SERVICE ---
  contracts-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: contracts-service
        SERVICE_TYPE: nestjs
        SERVICE_PORT: 3002
    env_file:
      - .env
    expose:
      - "3002"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- TEMPLATES SERVICE ---
  templates-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: templates-service
        SERVICE_TYPE: nestjs
        SERVICE_PORT: 3003
    env_file:
      - .env
    expose:
      - "3003"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- INFRAESTRUCTURA ---
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: legaltech
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped

  # --- MONITORIZACIÃ“N ---
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - "3010:3000"
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge